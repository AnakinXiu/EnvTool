/* Defines all the groups here: */

/**\addtogroup Authentication
 *  @{
 */
/** @} */

/**\addtogroup Color
 *  @{
 */
/** @} */

/**\addtogroup Envtool
 *  @{
 */
/** @} */

/**\addtogroup Envtool_PY
 *  @{
 */
/** @} */

/**\addtogroup EveryThing
*  @{
*/
/** @} */

/**\addtogroup EveryThing_ETP
 *  @{
 */
/** @} */

/**\addtogroup Misc
 *  @{
 */
/** @} */


/** \mainpage Envtool
    \ingroup  Envtool

<h2>Introduction</h2>

Envtool is a tool to search along various environment variables for files (or a wildcard).
The following modes handles these environment variables:

<table>
  <tr><td width="20%">\c --cmake <td>Check and search in \c \%CMAKE_MODULE_PATH\%
                                     and it's built-in module-path.
  <tr><td>\c --evry[\em =host]   <td>Check and search in the [EveryThing](https://www.voidtools.com/) database.
  <tr><td>\c --inc               <td>Check and search in \c \%INCLUDE\%.
  <tr><td>\c --lib               <td>Check and search in \c \%LIB\% and \c \%LIBRARY_PATH\%.
  <tr><td>\c --man               <td>Check and search in \c \%MANPATH\%.
  <tr><td>\c --path              <td>Check and search in \c \%PATH\%.
  <tr><td>\c --pkg               <td>Check and search in \c \%PKG_CONFIG_PATH\%.
  <tr><td>\c --python[\em =X]    <td>Check and search in \c \%PYTHONPATH\% and \c sys.path[].\n
                                     The \em X selects a specific Python (if found). Can be one of these:\n
                                     <table>
                                       <tr><td>\c all    <td>Use all Python programs found on \c \%PATH\%.
                                                             This is the default.
                                       <tr><td>\c ipy2   <td>Use an IronPython program only.
                                       <tr><td>\c jython <td>Use a Jython program only.
                                       <tr><td>\c py2    <td>Use a Python2 program only.
                                       <tr><td>\c py3    <td>Use a Python3 program only.
                                       <tr><td>\c pypy   <td>Use a PyPy program only.
                                     </table>
                                     Otherwise use only first Python found on PATH (i.e. the default).
  <tr><td>\c --check             <td>Check for missing directories in all supported environment variables
                                     and missing files in these Registry keys:
                                     \verbatim HKCU\Microsoft\Windows\CurrentVersion\App Paths \endverbatim
                                     \verbatim HKLM\Microsoft\Windows\CurrentVersion\App Paths \endverbatim
</table>

<h2>Options</h2>

Envtool contains a lot of options. These are:
<table>
  <tr><td width="25%">
          \c --no-gcc       <td> Don't spawn \c prefix -gcc prior to checking.      [2].
  <tr><td>\c --no-g++       <td> Don't spawn \c prefix -g++ prior to checking.      [2]
  <tr><td>\c --no-prefix    <td> Don't check any \c prefix -ed gcc/g++ programs     [2].
  <tr><td>\c --no-sys       <td> Don't scan \c HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session \c Manager\\Environment.
  <tr><td>\c --no-usr       <td> Don't scan \c HKCU\\Environment.
  <tr><td>\c --no-app       <td> Don't scan \code
                                 HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths
                                 HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths
                                 \endcode
  <tr><td>\c --no-colour    <td> Don't print using colours.
  <tr><td>\c --no-watcom    <td> Don't check for Watcom in \c --include or \c --lib mode
  <tr><td>\c --owner        <td> Shown owner of the file.
  <tr><td>\c --pe           <td> Print checksum and version-info for PE-files.
  <tr><td>\c --32           <td> Tell \c prefix -gcc to return only 32-bit libs in \c --lib mode.\n
                                 Report only 32-bit PE-files with \c --pe option.
  <tr><td>\c --64           <td> Tell \c prefix -gcc to return only 64-bit libs in \c --lib mode.\n
                                 Report only 64-bit PE-files with \c --pe option.
  <tr><td>\c -c             <td> Don't add current directory to search-lists.
  <tr><td>\c -C             <td> Be case-sensitive.
  <tr><td>\c -d, \c --debug <td> Set debug level (\c -dd sets \c PYTHONVERBOSE=1 in \c --python mode).
  <tr><td>\c -D, \c --dir   <td> Looks only for directories matching \c \<file-spec\>.
  <tr><td>\c -H, \c --host  <td> Hostname/IPv4-address for remote FTP \c --evry searches.
                                 Can be used multiple times. Alternative syntax is \c --evry:host\[:port].
  <tr><td>\c -r, \c --regex <td> Enable Regular Expressions in all \c --mode searches.
  <tr><td>\c -s, \c --size  <td> Show size of file(s) found. With \c --dir option, recursively show
                                 The size of all files under directories matching \c \<file-spec\>.
  <tr><td>\c -q, \c --quiet <td> Disable warnings.
  <tr><td>\c -t             <td> Do some internal tests.
  <tr><td>\c -T             <td> Show file times in sortable decimal format. E.g. \c "20121107.180658".
  <tr><td>\c -u             <td> Show all paths on Unix format. E.g. \c c:/ProgramFiles/.
  <tr><td>\c -v             <td> Increase verbose level (currently only used in \c --pe).
  <tr><td>\c -V             <td> Show basic program version information.\n
                                 \c -VV and \c -VVV  prints much more information.
  <tr><td>\c -h, \c -?      <td> Show this help.
</table>

The \c prefix es are:
- \c  x86_64-w64-mingw32
- \c  i386-mingw32
- \c  i686-w64-mingw32
- \c  avr               for Arduino gcc development on Atmel processors

To avoid specifying an option every time you run Envtool, that can also be specified in an
environment variable \c ENVTOOL_OPTIONS.\n
For example:
  \verbatim
    set ENVTOOL_OPTIONS=--no-app
  \endverbatim

will use the option \c --no-app every time Envool is invoked.

<h2>Other Features</h2>


*/

