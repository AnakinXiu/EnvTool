{
  "name": "Envtool",
  "tagline": "Utility to check and search along environment variables. Or where Python-modules are located.",
  "body": "EnvTool v0.99:\r\n==============\r\n\r\nA tool to search along various environment variables for files (or a wildcard). The following option-modes handles\r\nthese environment variables:\r\n\r\n<table border=0 cellspacing=0>\r\n  <tr>\r\n    <td><tt>--path</tt>:</td> <td><tt>%PATH%</tt>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><tt>--inc</tt>:</td> <td><tt>%INCLUDE%</tt>, <tt>%C_INCLUDE_PATH%</tt> and <tt>%CPLUS_INCLUDE_PATH%</tt>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><tt>--lib</tt>:</td> <td><tt>%LIB%</tt> and <tt>%LIBRARY_PATH%.</tt></td>\r\n  </tr>\r\n  <tr>\r\n    <td><tt>--lib</tt>:</td> <td><tt>%LIB%</tt> and <tt>%LIBRARY_PATH%</tt>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><tt>--cmake</tt>:</td> <td><tt>%CMAKE_MODULE_PATH%</tt>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><tt>--man</tt>:</td> <td><tt>%MANPATH%</tt>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><tt>--python</tt>:</td> <td><tt>%PYTHONPATH%</tt> and <tt>sys.path[]</tt>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><tt>--evry</tt>:</td> <td><a href=\"http://www.voidtools.com/support/everything/\">EveryThing</a> file database.</td>\r\n  </tr>\r\n</table>\r\n\r\nIt also checks for missing directories along the above env-variables.\r\n\r\nThe `--path` option also checks these registry keys:\r\n  `HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths` and\r\n  `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths`\r\n\r\nand enumerates all keys for possible programs. E.g. if registry contains this:\r\n  `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\makensis.exe` =\r\n   `f:\\MinGW32\\bin\\MingW-studio\\makensis.exe`,\r\n\r\n`envtool --path maken*` will include `f:\\MinGW32\\bin\\MingW-studio\\makensis.exe`\r\nin the result.\r\n\r\nProblem with old programs pestering your `PATH` and *Registry* entries can be tricky\r\nto diagnose. Here I had an problem with an old version of the *FoxitReader PDF reader*:\r\nChecking with `envtool --path foxit*.exe`, resulted in:\r\n```\r\n  Matches in HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths:\r\n   (2)  27 Nov 2014 - 10:24:04: f:\\ProgramFiler\\FoxitReader\\FoxitReader.exe\r\n  Matches in %PATH:\r\n        21 Apr 2006 - 17:43:10: f:\\util\\FoxitReader.exe\r\n   (2): found in \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\".\r\n```\r\n\r\nHence if you write `FoxitReader` in the Window Run-box (*Winkey-R*), you'll get the\r\nnewer (27 Nov 2014) `FoxitReader` launched. But if you say `FoxitReader` in your shell\r\n(cmd etc.), you'll get the old version (21 Apr 2006).\r\n\r\nOther examples:\r\n\r\n**E.g. 1**: `envtool --path notepad*.exe` first checks the `%PATH%` env-var\r\n for consistency (reports missing directories in `%PATH%`) and prints\r\n all the locations of `notepad*.exe`. On my box the result is:\r\n```\r\nThu Jul 21 16:02:20 2011 : f:\\windows\\system32\\notepad-orig.exe\r\nMon Nov 18 19:26:40 2002 : f:\\windows\\system32\\notepad.exe\r\nThu Jul 21 16:13:11 2011 : f:\\windows\\system32\\notepad2.exe\r\nMon Nov 18 19:26:40 2002 : f:\\windows\\notepad.exe\r\n```\r\n\r\n**E.g. 2**: `envtool --inc afxwin*` first checks the `%INCLUDE%` env-var\r\nfor consistency (reports missing directories in `%INCLUDE`) and prints\r\nall the locations of `afxwin*`. On my box the result is:\r\n```\r\nThu Apr 14 18:54:46 2005 : g:\\vc_2010\\VC\\AtlMfc\\include\\AFXWIN.H\r\nThu Apr 14 18:54:46 2005 : g:\\vc_2010\\VC\\AtlMfc\\include\\AFXWIN1.INL\r\nThu Apr 14 18:54:46 2005 : g:\\vc_2010\\VC\\AtlMfc\\include\\AFXWIN2.INL\r\nThu Apr 14 18:54:46 2005 : g:\\vc_2010\\VC\\AtlMfc\\include\\AFXWIN.H\r\nThu Apr 14 18:54:46 2005 : g:\\vc_2010\\VC\\AtlMfc\\include\\AFXWIN1.INL\r\nThu Apr 14 18:54:46 2005 : g:\\vc_2010\\VC\\AtlMfc\\include\\AFXWIN2.INL\r\n```\r\n\r\n**E.g. 3**: If an *App Paths* registry key has an alias for a command, the target\r\nprogram is printed. E.g. if:\r\n`HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\winzip.exe`\r\npoints to `c:\\PROGRA~1\\WINZIP\\winzip32.exe`\r\n\r\n(here `winzip.exe` is an alias for the real program `winzip32.exe`). Hence\r\n`envtool --path winzip*` reports:\r\n```\r\nFri Oct 11 09:10:00 2002: f:\\PROGRA~1\\WINZIP\\winzip.exe !\r\nFri Oct 11 09:10:00 2002: f:\\PROGRA~1\\WINZIP\\winzip32.exe !\r\n(!) - found in registry.\r\n```\r\n\r\n**E.g. 4**: It's pretty amazing what the *FindFile()* API in Windows can do. E.g.:\r\n`envtool --path *-?++.exe`:\r\n```\r\nTue Nov 19 12:01:38 2002 : f:\\Mingw32\\bin\\mingw32-c++.exe\r\nTue Nov 19 12:01:38 2002 : f:\\Mingw32\\bin\\mingw32-g++.exe\r\nWed Mar 09 14:39:05 2011 : f:\\CygWin\\bin\\i686-pc-cygwin-c++.exe\r\nWed Mar 09 14:39:05 2011 : f:\\CygWin\\bin\\i686-pc-cygwin-g++.exe\r\n```\r\n\r\nAlthough not as powerful as \"POSIX-style file matching\" which is also built-in\r\nvia the `fnmatch()` function.\r\n\r\n\r\n**E.g. 5**: If you have Python installed, the `--python` option will search in\r\n`%PYTHONPATH` and `sys.path[]` for a match. E.g.:\r\n`envtool.exe --python ss*.py`:\r\n```\r\n24 Jun 2011 - 11:38:10: f:\\ProgramFiler\\Python27\\lib\\ssl.py\r\n16 Feb 2011 - 12:14:28: f:\\ProgramFiler\\Python27\\lib\\site-packages\\win32\\lib\\sspi.py\r\n16 Feb 2011 - 12:14:28: f:\\ProgramFiler\\Python27\\lib\\site-packages\\win32\\lib\\sspicon.py\r\n```\r\n\r\n**E.g. 6**: The `--python` option wil also look inside Python *EGG*s (plain ZIP-files) found\r\nin `sys.path[]`. E.g.:\r\n`envtool.exe --python socket.py`:\r\n```\r\n27 Mar 2013 - 16:41:58: stem\\socket.py  (%PYTHONHOME\\lib\\site-packages\\stem-1.0.1-py2.7.egg)\r\n30 Apr 2014 - 09:54:04: f:\\Programfiler\\Python27\\lib\\socket.py\r\n```\r\n\r\n**E.g. 7**: The `--evry` option combined with the `--regex` (or `-r`) is quite powerful. To find\r\nall directories with Unix man-pages, you can do this:\r\n`envtool.exe --evry -r \"man[1-9]$\"`:\r\n```\r\n<DIR> 03 Jun 2014 - 17:50:36: f:\\CygWin\\lib\\perl5\\5.14\\Parse-Yapp-1.05\\blib\\man1\\\r\n<DIR> 03 Jun 2014 - 17:54:06: f:\\CygWin\\usr\\man\\man1\\\r\n<DIR> 03 Jun 2014 - 17:56:08: f:\\CygWin\\usr\\share\\man\\man1\\\r\n<DIR> 03 Jun 2014 - 17:55:58: f:\\CygWin\\usr\\share\\man\\bg\\man1\\\r\n```\r\n\r\nWhich is probably a lot more directories than you have in you `%MANPATH%`.\r\n\r\nOr to find only `foo*.bar` files under directory-branch(es) `misc`, you can do:\r\n```\r\nenvtool.exe --evry -r \"misc\\\\.*\\\\foo.*\\.bar\"\r\n```\r\n\r\n**E.g. 8**: More than one option-mode can combined. For example:\r\n`envtool.exe --man --evry gzip*.[1-9]*`:\r\n```\r\nMatches in %MANPATH:\r\n      13 Mar 2011 - 19:47:43: f:\\CygWin\\usr\\share\\man\\man1\\gzip.1.gz\r\n      09 Dec 1997 - 17:55:20: e:\\djgpp\\share\\man\\man1\\gzip.1\r\n      15 Dec 2004 - 02:06:32: e:\\djgpp\\share\\man\\cat1\\gzip.1\r\nMatches from EveryThing:\r\n<DIR> 24 May 2014 - 12:48:16: e:\\DJGPP\\gnu\\gzip-1.3-3\\\r\n      15 Dec 2004 - 02:06:32: e:\\DJGPP\\share\\man\\cat1\\gzip.1\r\n      09 Dec 1997 - 17:55:20: e:\\DJGPP\\share\\man\\man1\\gzip.1\r\n      13 Mar 2011 - 19:47:43: f:\\CygWin\\usr\\share\\man\\man1\\gzip.1.gz\r\n      11 Nov 2013 - 14:05:46: f:\\MingW32\\msys32\\usr\\share\\man\\man1\\gzip.1.gz\r\n<DIR> 01 Sep 2014 - 17:49:32: f:\\MingW32\\msys32\\var\\lib\\pacman\\local\\gzip-1.6-1\\\r\n      30 Sep 2013 - 13:07:53: f:\\MingW32\\var\\cache\\mingw-get\\packages\\gzip-1.3.12-2-msys-1.0.13-bin.tar.lzma\r\n```\r\n\r\nC-source included in ./src. Makefiles for MinGW, Cygwin, Watcom and MSVC. Use at own\r\nrisk. Enjoy!\r\n\r\n  Gisle Vanem <gvanem@yahoo.no>.\r\n\r\n-------------------------------------------------------------------\r\n\r\n### Changes:\r\n```\r\n\r\n  0.1:  Initial version.\r\n\r\n  0.2:  Added file date/time stamp. Check for suffix or trailing\r\n        wildcard in file-specification. If not found add a trailing \"*\".\r\n\r\n  0.3: Handled the case where an env-var contains the current directory.\r\n        E.g. when \"PATH=./;c:\\util\", turn the \"./\" into CWD (using 'getcwd()')\r\n        for 'stat(\"/.\")' to work. Turn off command-line globbing in MinGW\r\n        ('_CRT_glob = 0').\r\n\r\n  0.4:  Rudimentary check for Python 'sys.path' searching.\r\n\r\n  0.5:  Add a directory search spec mode (\"--dir foo*.bar\" searches for\r\n        directories only). Better handling of file-specs with a sub-directory\r\n        part. E.g. \"envtool --python win32\\Demos\\Net*\".\r\n\r\n  0.6:  Add support for POSIX-style file matching (using fnmatch() from djgpp).\r\n        E.g. a file-spec can contain things like \"foo/[a-d]bar\".\r\n        Note: it doesn't handle ranges on directories. Only ranges on directories\r\n              withing Pyhon EGG-files are handled.\r\n\r\n        Improved Python 'sys.path' searching. Uses zipinfo.exe and looks inside\r\n        Python EGG-files (zip files) for a match.\r\n\r\n  0.7:  Improved Python 'sys.path' searching. Look inside Python EGGs and ZIP-files\r\n        for a match (this uses the zipinfo external program).\r\n        Add colour-output option '-C'.\r\n\r\n  0.8:  New option '--pe' outputs version info from resource-section. E.g.:\r\n          envtool --path --pe vcbuild.*\r\n          Matches in %PATH:\r\n               19 Mar 2010 - 15:02:22: g:\\vc_2010\\VC\\vcpackages\\vcbuild.dll\r\n               ver 10.0.30319.1\r\n\r\n  0.9:  Cosmetic changes in debug-output ('-d') and command-line parsing.\r\n\r\n  0.92: Added option \"--evry\" to check matches in Everything's database.\r\n        This option queries the database via IPC.\r\n        Ref. http://www.voidtools.com/support/everything/\r\n\r\n  0.93: The \"--python\" option now loads Python dynamically (pythonXX.dll)\r\n        and calls 'PyRun_SimpleString()' to execute Python programs.\r\n\r\n  0.94: Fixes for '--evry' (EverThing database) searches.\r\n        Drop '-i' option.\r\n        Add  '-r' option.\r\n\r\n  0.95: Tweaks for better 'fnmatch()' matches.\r\n        Improved '--evry' Regular Expression (--regex) searches.\r\n        Build the MSVC-version using '-MT' (drop the dependency on MSVC1*.DLL)\r\n\r\n  0.96: Better Python embedding; lookup python.exe in env-var %PYTHON, then on\r\n        %PATH. Test for correct Python DLL. Report full name of python.exe in\r\n        \"envtool -V\".\r\n\r\n  0.97: Lots of improvements. Print more details on \"envtool -VV\" (compiler and\r\n        linker flags).\r\n\r\n  0.98: Added option \"--man\" to search for matches in all *subdir* of %MANPATH%.\r\n        E.g. subdirs \"man[1-9]\" and \"cat[1-9]\".\r\n\r\n        Added option \"--cmake\" to search for matches along the built-in Cmake\r\n        module path and '%CMAKE_MODULE_PATH%'.\r\n\r\n  0.99: Option \"--pe\" now calls WinTrust functions (in win_trust.c) to check if\r\n        a PE-file is \"Verified\", \"Not trusted\" etc.\r\n\r\n\r\n```\r\n\r\nPS. This file is written with the aid of [MarkdownPad](http://www.markdownpad.com/).\r\nA real time-saver.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}